apiVersion: k3d.io/v1alpha5
kind: Simple
metadata:
  name: dev
servers: 1
agents: 2
kubeAPI:
  host: "localhost"
  hostIP: "127.0.0.1"
  hostPort: "6445"
image: rancher/k3s:v1.27.5-k3s1
# network: multiserver-net
# subnet: "172.28.0.0/16"
token: 1B1PkDXQYUu0ONSZ
volumes: # repeatable flags are represented as YAML lists
- volume: /tmp/k3d-dev-vol:/tmp/k3d-dev-vol
  nodeFilters:
  - server:*
  - agent:*
ports:
- port: 80:80 # same as `--port '8080:80@loadbalancer'`
  nodeFilters:
  - loadbalancer
- port: 443:443 # same as `--port '8080:80@loadbalancer'`
  nodeFilters:
  - loadbalancer
# env:
#   - envVar: bar=baz # same as `--env 'bar=baz@server:0'`
#     nodeFilters:
#       - server:0
registries: # define how registries should be created or used
  create: # creates a default registry to be used with the cluster; same as `--registry-create registry.localhost`
    name: k3d-registry
    host: "0.0.0.0"
    hostPort: "5500"
    # proxy: # omit this to have a "normal" registry, set this to create a registry proxy (pull-through cache)
    #   remoteURL: https://registry-1.docker.io # mirror the DockerHub registry
    #   username: "" # unauthenticated
    #   password: "" # unauthenticated
    volumes:
    - /Users/joern/git/github.com/joern-arne/k3d-flux/registry:/var/lib/registry # persist registry data locally
    #   use:
    #     - k3d-myotherregistry:5000 # some other k3d-managed registry; same as `--registry-use 'k3d-myotherregistry:5000'`
  # config: | # define contents of the `registries.yaml` file (or reference a file); same as `--registry-config /path/to/config.yaml`
  #   mirrors:
  #     docker.io:
  #       endpoint:
  #         - https://registry-1.docker.io

# hostAliases: # /etc/hosts style entries to be injected into /etc/hosts in the node containers and in the NodeHosts section in CoreDNS
#   - ip: 1.2.3.4
#     hostnames: 
#       - my.host.local
#       - that.other.local
#   - ip: 1.1.1.1
#     hostnames:
#       - cloud.flare.dns
# options:
#   k3d: # k3d runtime settings
#     wait: true # wait for cluster to be usable before returning; same as `--wait` (default: true)
#     timeout: "60s" # wait timeout before aborting; same as `--timeout 60s`
#     disableLoadbalancer: false # same as `--no-lb`
#     disableImageVolume: false # same as `--no-image-volume`
#     disableRollback: false # same as `--no-Rollback`
#     loadbalancer:
#       configOverrides:
#         - settings.workerConnections=2048
#   k3s: # options passed on to K3s itself
#     extraArgs: # additional arguments passed to the `k3s server|agent` command; same as `--k3s-arg`
#       - arg: "--tls-san=my.host.domain"
#         nodeFilters:
#           - server:*
#     nodeLabels:
#       - label: foo=bar # same as `--k3s-node-label 'foo=bar@agent:1'` -> this results in a Kubernetes node label
#         nodeFilters:
#           - agent:1
#   kubeconfig:
#     updateDefaultKubeconfig: true # add new cluster to your default Kubeconfig; same as `--kubeconfig-update-default` (default: true)
#     switchCurrentContext: true # also set current-context to the new cluster's context; same as `--kubeconfig-switch-context` (default: true)
#   runtime: # runtime (docker) specific options
#     gpuRequest: all # same as `--gpus all`
#     labels:
#       - label: bar=baz # same as `--runtime-label 'bar=baz@agent:1'` -> this results in a runtime (docker) container label
#         nodeFilters:
#           - agent:1
#     ulimits:
#       - name: nofile
#         soft: 26677
#         hard: 26677
